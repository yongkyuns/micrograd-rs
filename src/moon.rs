/// Moon data from sklearn.
/// ```python
/// from matplotlib import pyplot as plt
/// from sklearn.datasets import make_moons
/// X, y = make_moons(n_samples=100, noise=0.1)
///
/// y = y*2 - 1 # make y be -1 or 1
/// # visualize in 2D
/// plt.figure(figsize=(5,5))
/// plt.scatter(X[:,0], X[:,1], c=y, s=20, cmap='jet')
///
/// for i in range(y.shape[0]):
/// 	print("({:15.10}, {:15.10}, {:>3}),".format(X[i,0], X[i,1], y[i]))
/// ```
pub const moon: [(f64, f64, i32); 100] = [
    (0.08982086542, 1.01676317, -1),
    (0.6884009821, 0.5045909667, -1),
    (-0.01285492211, 0.3124591913, 1),
    (-0.2802306945, 0.8792005876, -1),
    (0.1832789954, -0.05909171432, 1),
    (1.675767199, 0.02069782627, 1),
    (1.364110624, -0.5272078386, 1),
    (0.2512274741, 0.9877571509, -1),
    (1.857504765, 0.1193019204, 1),
    (-0.9572972878, 0.06352237284, -1),
    (-0.1071210481, -0.05017889004, 1),
    (1.04336215, 0.1030151007, -1),
    (0.8349979862, 0.4771098175, -1),
    (1.618691107, -0.3094288381, 1),
    (-0.8940309804, 0.5981810405, -1),
    (1.25453077, -0.684534917, 1),
    (-1.111547884, 0.1754515714, -1),
    (0.6499318739, -0.387686054, 1),
    (-0.6115172194, 0.956289881, -1),
    (1.680403543, -0.07229068059, 1),
    (0.8915552054, -0.3788573755, 1),
    (-0.7655095035, 0.6706365391, -1),
    (0.01121182088, 0.2116854376, 1),
    (0.9417975073, -0.02383200696, -1),
    (0.1200689615, -0.1365714156, 1),
    (0.03922077193, 0.8050390773, -1),
    (1.444874423, -0.3131927141, 1),
    (1.061537119, -0.602650993, 1),
    (0.5694987932, 0.7718298051, -1),
    (0.4451385179, 0.827923872, -1),
    (1.192052999, -0.5297022592, 1),
    (0.08076223006, -0.1391506679, 1),
    (0.9317477431, 0.3295827595, -1),
    (0.6366368665, -0.5259446597, 1),
    (-0.8051961428, 0.5466885765, -1),
    (-0.9251054339, 0.4341357418, -1),
    (0.4134821955, -0.05669614728, 1),
    (1.387640713, -0.4826292189, 1),
    (1.965596605, 0.1413716918, 1),
    (-0.4757285379, 0.8188199846, -1),
    (-0.145617826, 0.3620274925, 1),
    (1.85349946, -0.03645858641, 1),
    (-0.8485717706, 0.5383857591, -1),
    (1.962878397, 0.3818573342, 1),
    (1.952461968, 0.1833441045, 1),
    (-0.7553204661, 0.4074086366, -1),
    (0.9231261251, 0.1611662201, -1),
    (-0.2069802421, 0.9845115731, -1),
    (0.9279401376, -0.6108292591, 1),
    (0.6054713958, -0.1843040836, 1),
    (1.633389093, -0.1972345856, 1),
    (-1.024305047, 0.2507230934, -1),
    (0.3998208172, -0.2037214273, 1),
    (0.7828648156, 0.5545664628, -1),
    (0.233962883, 0.9635643245, -1),
    (0.5349966546, 0.7562188385, -1),
    (-0.2622079203, 0.8800469693, -1),
    (1.086611895, -0.5290384832, 1),
    (-0.1637336791, 0.9939094047, -1),
    (2.116686393, 0.2395721942, 1),
    (-0.9272832743, 0.3472212518, -1),
    (-0.6888029138, 0.7080302076, -1),
    (-0.9632329534, 0.008727894645, -1),
    (0.6963630899, 0.5006016445, -1),
    (0.02407682296, 0.3587908778, 1),
    (1.900151247, 0.3917702013, 1),
    (0.4445149985, 0.9610586668, -1),
    (-0.1475458662, 0.9308394663, -1),
    (-0.09963596523, 0.8972015329, -1),
    (1.049526807, -0.3828747815, 1),
    (0.8257098006, -0.3646399338, 1),
    (0.6720361757, 0.6986539352, -1),
    (0.7777540243, 0.5101289167, -1),
    (0.2511722357, -0.2102571008, 1),
    (0.01209576387, 0.03072885476, 1),
    (0.06824963138, 0.9387666144, -1),
    (0.9602916483, 0.1378982421, -1),
    (1.713778469, -0.321270945, 1),
    (-0.6864117084, 0.5324612073, -1),
    (-0.0486293571, 0.3375914654, 1),
    (0.3075125146, 0.9545565558, -1),
    (-0.4039797877, 1.043607549, -1),
    (1.529234005, -0.2868902967, 1),
    (0.3932255589, -0.347415863, 1),
    (-1.054847264, 0.2071857556, -1),
    (-0.7713236864, 0.5640711894, -1),
    (0.8536627895, 0.255860645, -1),
    (0.09070716647, 0.9644139455, -1),
    (-0.2940437376, 0.9996428364, -1),
    (0.5246902924, -0.2763722873, 1),
    (0.9375155814, -0.5896041214, 1),
    (0.4568843676, -0.3613939041, 1),
    (0.08109574887, 0.4947247054, 1),
    (1.657400487, -0.1726090592, 1),
    (0.4438574115, -0.4409199307, 1),
    (0.9539998053, 0.3948449902, -1),
    (2.034907414, 0.08248214184, 1),
    (0.9659264466, 0.2276989726, -1),
    (1.780182516, 0.1238366284, 1),
    (1.974842448, -0.1688931703, 1),
];

pub fn moon_data() -> Vec<(f64, f64, i32)> {
    let mut data = Vec::new();
    for (a, b, c) in moon.iter() {
        data.push((*a, *b, *c));
    }
    data
}
